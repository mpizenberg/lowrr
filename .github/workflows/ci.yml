name: CI

on:
  pull_request:
  push:
    branches: [ master, main ]

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os: windows-latest
            target: x86_64-pc-windows-msvc

          - os: macos-latest
            target: x86_64-apple-darwin
            # target: aarch64-unknown-linux-gnu

    steps:
      - name: install musl-tools if musl target
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: sudo apt install musl-tools

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.target }}-build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-build-
            ${{ matrix.target }}-

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Compress compiled binary
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          cd target/${{ matrix.target }}/release
          tar czf lowrr_${{ matrix.target }}.tar.gz lowrr

      - uses: actions/upload-artifact@v2
        if: ${{ !startsWith(matrix.os, 'windows') }}
        with:
          name: lowrr_${{ matrix.target }}.tar.gz
          path: target/${{ matrix.target }}/release/lowrr_${{ matrix.target }}.tar.gz

      - uses: actions/upload-artifact@v2
        if: ${{ startsWith(matrix.os, 'windows') }}
        with:
          name: lowrr_${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lowrr.exe

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.os }}-test-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-test-
            ${{ matrix.os }}

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

  check_formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: clippy

  elm-build:
    name: Build the Elm Web application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install elm, elm-format and cache the ELM_HOME directory
        uses: mpizenberg/elm-tooling-action@v1.2
        with:
          cache-key: elm-build-${{ hashFiles('web-elm/elm-tooling.json', 'web-elm/elm.json') }}
          cache-restore-key: elm-build
          elm-tooling-dir: web-elm

      - name: Build the app
        run: cd web-elm && elm make src/Main.elm --optimize --output=static/Elm.js

  elm-format:
    name: Check Elm formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install elm, elm-format and cache the ELM_HOME directory
        uses: mpizenberg/elm-tooling-action@v1.2
        with:
          cache-key: elm-format-${{ hashFiles('web-elm/elm-tooling.json') }}
          cache-restore-key: elm-format
          elm-tooling-dir: web-elm

      - name: Check formatting
        run: cd web-elm && elm-format src --validate

  elm-review:
    name: Check elm-review rules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install elm, elm-format and cache the ELM_HOME directory
        uses: mpizenberg/elm-tooling-action@v1.2
        with:
          cache-key: elm-review-${{ hashFiles('web-elm/elm-tooling.json', 'web-elm/elm.json', 'web-elm/review/src/ReviewConfig.elm') }}
          cache-restore-key: elm-review
          elm-tooling-dir: web-elm

      - name: Install elm-review
        run: npm install elm-review

      - name: Check elm-review
        run: cd web-elm && npx elm-review
